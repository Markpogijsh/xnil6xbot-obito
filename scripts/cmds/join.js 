const axios = require("axios");
const fs = require("fs-extra");
const request = require("request");

module.exports = {
  config: {
    name: "join",
    version: "2.0",
    author: "Kshitiz + Fix by Keijo",
    countDown: 0,
    role: 2,
    shortDescription: "Join the group that bot is in",
    longDescription: "",
    category: "user",
    guide: {
      en: "{p}{n}",
    },
  },

  onStart: async function ({ api, event }) {
    try {
      const groupList = await api.getThreadList(20, null, ['INBOX']);
      const filteredList = groupList.filter(group => group.threadName !== null);

      const activeGroups = [];

      for (const group of filteredList) {
        try {
          const info = await api.getThreadInfo(group.threadID);
          const isStillMember = info.participantIDs.includes(api.getCurrentUserID());

          if (isStillMember) {
            activeGroups.push(group);
          }
        } catch (err) {
          continue; // skip inaccessible threads
        }
      }

      if (activeGroups.length === 0) {
        return api.sendMessage('❌ No active group chats found where the bot is still a member.', event.threadID);
      }

      const formattedList = activeGroups.map((group, index) =>
        `│${index + 1}. ${group.threadName}\n│𝐓𝐈𝐃: ${group.threadID}`
      );

      const message = `╭─╮\n│𝐋𝐢𝐬𝐭 𝐨𝐟 𝐠𝐫𝐨𝐮𝐩 𝐜𝐡𝐚𝐭𝐬 (active only):\n${formattedList.join("\n")}\n╰───────────ꔪ`;

      const sentMessage = await api.sendMessage(message, event.threadID);

      global.GoatBot.onReply.set(sentMessage.messageID, {
        commandName: 'join',
        messageID: sentMessage.messageID,
        author: event.senderID,
        activeGroups
      });

    } catch (error) {
      console.error("Error listing group chats:", error);
      return api.sendMessage("❌ Error retrieving group chats.", event.threadID);
    }
  },

  onReply: async function ({ api, event, Reply, args }) {
    const { author, activeGroups } = Reply;

    if (event.senderID !== author) {
      return;
    }

    const groupIndex = parseInt(args[0], 10);

    if (isNaN(groupIndex) || groupIndex <= 0) {
      return api.sendMessage('❌ Invalid input. Please provide a valid number.', event.threadID, event.messageID);
    }

    if (groupIndex > activeGroups.length) {
      return api.sendMessage('❌ Invalid group number. Choose a number within the list.', event.threadID, event.messageID);
    }

    const selectedGroup = activeGroups[groupIndex - 1];

    try {
      await api.addUserToGroup(event.senderID, selectedGroup.threadID);
      return api.sendMessage(`✅ You have joined: ${selectedGroup.threadName}`, event.threadID, event.messageID);
    } catch (error) {
      console.error("Error joining group chat:", error);
      return api.sendMessage('❌ Failed to join group. Make sure the bot has permission.', event.threadID, event.messageID);
    } finally {
      global.GoatBot.onReply.delete(event.messageID);
    }
  }
};